/// Decoder of the GIF bitmap format.
public class GifDecoder
{
	int Width;
	int Height;
	int[256] Palette;
	byte[] Pixels;
	bool Interlace;

	/// Returns image width.
	public int GetWidth()
		return Width;

	/// Returns image height.
	public int GetHeight()
		return Height;

	/// Returns image color table as a 256-element array.
	/// Each entry is a 24-bit integer of the form 0xRRGGBB.
	public int[] GetPalette()
		return Palette;

	/// Returns pixels, top-down, left-to-right.
	/// The values are indices in the color table (see `GetPalette`)
	/// The returned array is `width*height` long.
	/// It is allocated in `Decode`.
	/// In C, you should call `free` on it when you no longer need it.
	public byte[] GetPixels()
		return Pixels;

	byte[] Input;
	int InputLength;
	int InputOffset;

	int ReadByte()
	{
		if (InputOffset >= InputLength)
			throw "Unexpected EOF";
		return Input[InputOffset++];
	}

	int ReadWord()
	{
		int lo = ReadByte();
		return lo | ReadByte() << 8;
	}

	void ReadPalette(int flags)
	{
		if ((flags & 0x80) != 0) {
			int colors = 2 << (flags & 7);
			for (int i = 0; i < colors; i++) {
				int r = ReadByte();
				int g = ReadByte();
				int b = ReadByte();
				Palette[i] = r << 16 | g << 8 | b;
			}
		}
	}

	int BlockBytes;

	int ReadBlockByte()
	{
		if (BlockBytes == 0) {
			BlockBytes = ReadByte();
			if (BlockBytes == 0)
				throw "Unexpected block terminator";
		}
		BlockBytes--;
		return ReadByte();
	}

	int BitBuffer;
	int BitBufferBits;

	int ReadCode(int bits)
	{
		while (BitBufferBits < bits) {
			BitBuffer |= ReadBlockByte() << BitBufferBits;
			BitBufferBits += 8;
		}
		int result = BitBuffer & (1 << bits) - 1;
		BitBuffer >>= bits;
		BitBufferBits -= bits;
		return result;
	}

	int ToInterlaceOffset(int offset)
	{
		if (!Interlace)
			return offset;
		int y = offset / Width;
		int x = offset % Width;
		if (y >= Height + 1 >> 1)
			y = y - (Height + 1 >> 1) << 1 | 1; // pass 4
		else if (y >= Height + 3 >> 2)
			y = y - (Height + 3 >> 2) << 2 | 2; // pass 3
		else if (y >= Height + 7 >> 3)
			y = y - (Height + 7 >> 3) << 3 | 4; // pass 2
		else
			y <<= 3; // pass 1
		return y * Width + x;
	}

	/// Decodes a GIF stream passed as a byte array.
	/// Throws an exception on error.
	public void Decode(
		/// The content of the GIF stream.
		byte[] input,
		/// The length of the GIF stream.
		int inputLength)
	{
		Pixels = null;
		Input = input;
		InputLength = inputLength;
		InputOffset = 0;

		if (ReadByte() != 'G'
		 || ReadByte() != 'I'
		 || ReadByte() != 'F'
		 || ReadByte() != '8')
			throw "Not a GIF";
		switch (ReadByte()) {
		case '7':
		case '9':
			break;
		default:
			throw "Not a GIF";
		}
		if (ReadByte() != 'a')
			throw "Not a GIF";
		ReadWord(); // screen width
		ReadWord(); // screen height
		int flags = ReadByte();
		ReadByte(); // background color index
		ReadByte(); // pixel aspect ratio
		ReadPalette(flags); // global palette

		for (;;) {
			int b = ReadByte();
			if (b == 0x2c) // Image Descriptor
				break;
			if (b != 0x21) // Extension
				throw "Invalid block";
			ReadByte();
			for (;;) {
				int length = ReadByte();
				if (length == 0)
					break;
				while (--length >= 0)
					ReadByte();
			}
		}

		ReadWord();
		ReadWord();
		Width = ReadWord();
		Height = ReadWord();
		if (Width == 0 || Height == 0)
			throw "Zero size";
		flags = ReadByte();
		Interlace = (flags & 0x40) != 0;
		ReadPalette(flags); // local palette
		int literalBits = ReadByte();
		if (literalBits == 0 || literalBits > 8)
			throw "Invalid minimum code size";

		BlockBytes = 0;
		BitBuffer = 0;
		BitBufferBits = 0;
		int pixelsLength = Width * Height;
		Pixels = new byte[pixelsLength];
		int literalCodes = 1 << literalBits;
		int codes = literalCodes + 2;
		int codeBits = literalBits + 1;
		const int maxCodes = 4096;
#if STANDALONE_DICTIONARY
		int[maxCodes] prefixes; // short
		byte[maxCodes] suffixes;
		for (int i = 0; i < literalCodes; i++) {
			prefixes[i] = -1;
			suffixes[i] = i;
		}
		byte pixel = 0;
#else
		int[maxCodes + 1] offsets;
#endif

		for (int pixelsOffset = 0; pixelsOffset < pixelsLength; ) {
			int code = ReadCode(codeBits);
			if (code == literalCodes) {
				// reset
				codes = literalCodes + 2;
				codeBits = literalBits + 1;
				continue;
			}
			if (code == literalCodes + 1)
				throw "Unexpected EOI code";
			if (code >= codes)
				throw "Code out of range";

#if STANDALONE_DICTIONARY
			int c = code;
			do {
				pixelsOffset++;
				c = prefixes[c];
			} while (c >= 0);
			if (pixelsOffset > pixelsLength)
				throw "Too many pixels";

			int destOffset = pixelsOffset;
			c = code;
			do {
				if (c < codes - 1)
					pixel = suffixes[c];
				Pixels[ToInterlaceOffset(--destOffset)] = pixel;
				c = prefixes[c];
			} while (c >= 0);

			if (codes <= maxCodes) {
				suffixes[codes - 1] = pixel;
				if (codes < maxCodes) {
					prefixes[codes] = code;
					if ((codes & codes - 1) == 0)
						codeBits++;
				}
				codes++;
			}
#else
			if (codes <= maxCodes) {
				if (codes < maxCodes && (codes & codes - 1) == 0)
					codeBits++;
				offsets[codes++] = pixelsOffset;
			}
			if (code < literalCodes)
				Pixels[ToInterlaceOffset(pixelsOffset++)] = code;
			else {
				int sourceOffset = offsets[code];
				int endOffset = offsets[code + 1];
				if (pixelsOffset + endOffset - sourceOffset >= pixelsLength)
					throw "Too many pixels";
				do
					Pixels[ToInterlaceOffset(pixelsOffset++)] = Pixels[ToInterlaceOffset(sourceOffset++)];
				while (sourceOffset <= endOffset);
			}
#endif
		}
	}
}
