/// Bitmap.
public class Image
{
	int Width;
	int Height;
	int Type;
	int Depth;
	int[256] Palette;
	byte[] Pixels;
	bool Adam7Interlace;
	int[8] Adam7PassOffset;
	int TransparentColor;
	int TransparentColorHi;

	/// Returns image width.
	public int GetWidth()
		return Width;

	/// Returns image height.
	public int GetHeight()
		return Height;

	int GetBitsPerPixel()
	{
		const byte[7] channels = { 1, 0, 3, 1, 2, 0, 4 };
		return channels[Type] * Depth;
	}

	int GetAdam7Stride(int pass)
		return (Width + (7 >> (pass >> 1)) >> (8 - pass >> 1)) * GetBitsPerPixel() + 7 >> 3;

	int GetAdam7Height(int pass)
		return Height + (7 >> (pass - 1 >> 1)) >> (pass == 1 ? 3 : 9 - pass >> 1);

	/// Returns pixel at the given position in the form 0xAARRGGBB.
	public int GetPixel(int x, int y)
	{
		int offset;
		if (Adam7Interlace) {
			int pass;
			switch (y & 7) {
			case 0:
				switch (x & 7) {
				case 0:
					pass = 1;
					x >>= 3;
					y >>= 3;
					break;
				case 4:
					pass = 2;
					x >>= 3;
					y >>= 3;
					break;
				case 2:
				case 6:
					pass = 4;
					x >>= 2;
					y >>= 2;
					break;
				default:
					pass = 6;
					x >>= 1;
					y >>= 1;
					break;
				}
				break;
			case 4:
				switch (x & 3) {
				case 0:
					pass = 3;
					x >>= 2;
					y >>= 3;
					break;
				case 2:
					pass = 4;
					x >>= 2;
					y >>= 2;
					break;
				default:
					pass = 6;
					x >>= 1;
					y >>= 1;
					break;
				}
				break;
			case 2:
			case 6:
				if ((x & 1) == 0) {
					pass = 5;
					y >>= 2;
				}
				else {
					pass = 6;
					y >>= 1;
				}
				x >>= 1;
				break;
			default:
				pass = 7;
				y >>= 1;
				break;
			}
			offset = Adam7PassOffset[pass] + y * GetAdam7Stride(pass);
		}
		else {
			offset = y * GetAdam7Stride(7);
		}

		int b;
		int bytesPerComponent;

		switch (Type) {

		case 0: // grayscale
			int rgb;
			switch (Depth) {
			case 1:
				b = Pixels[offset + (x >> 3)] >> (~x & 7) & 1;
				rgb = b * 0xffffff;
				break;
			case 2:
				b = Pixels[offset + (x >> 2)] >> ((~x & 3) << 1) & 3;
				rgb = b * 0x555555;
				break;
			case 4:
				b = Pixels[offset + (x >> 1)];
				b = (x & 1) == 0 ? b >> 4 : b & 15;
				rgb = b * 0x111111;
				break;
			case 8:
				b = Pixels[offset + x];
				rgb = b * 0x010101;
				break;
			case 16:
				offset += x << 1;
				b = Pixels[offset];
				rgb = b * 0x010101;
				b = b << 8 | Pixels[offset + 1];
				break;
			default:
				return 0;
			}
			if (b != TransparentColor)
				rgb |= 0xff << 24;
			return rgb;

		case 2: // RGB
			switch (Depth) {
			case 8:
				offset += x * 3;
				rgb = Pixels[offset] << 16 | Pixels[offset + 1] << 8 | Pixels[offset + 2];
				if (rgb != TransparentColor)
					rgb |= 0xff << 24;
				return rgb;
			case 16:
				offset += x * 6;
				rgb = Pixels[offset] << 16 | Pixels[offset + 2] << 8 | Pixels[offset + 4];
				if (rgb != TransparentColorHi
				 || (Pixels[offset + 1] << 16 | Pixels[offset + 3] << 8 | Pixels[offset + 5]) != TransparentColor)
					rgb |= 0xff << 24;
				return rgb;
			default:
				return 0;
			}

		case 3: // indexed
			switch (Depth) {
			case 1:
				b = Pixels[offset + (x >> 3)] >> (~x & 7) & 1;
				break;
			case 2:
				b = Pixels[offset + (x >> 2)] >> ((~x & 3) << 1) & 3;
				break;
			case 4:
				b = Pixels[offset + (x >> 1)];
				b = (x & 1) == 0 ? b >> 4 : b & 15;
				break;
			case 8:
				b = Pixels[offset + x];
				break;
			default:
				return 0;
			}
			return Palette[b];

		case 4: // grayscale+alpha
			bytesPerComponent = Depth >> 3;
			offset += x * (2 * bytesPerComponent);
			return Pixels[offset + bytesPerComponent] << 24
			     | Pixels[offset] * 0x010101;

		case 6: // RGBA
			bytesPerComponent = Depth >> 3;
			offset += x * (4 * bytesPerComponent);
			return Pixels[offset + 3 * bytesPerComponent] << 24
			     | Pixels[offset] << 16
			     | Pixels[offset + bytesPerComponent] << 8
			     | Pixels[offset + 2 * bytesPerComponent];

		default:
			return 0;
		}
	}

}
